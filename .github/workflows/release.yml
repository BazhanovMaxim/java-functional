name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3). If set, a tag v<version> is created and released.'
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (опционально) создание тега при ручном запуске
      - name: Create tag (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        run: |
          VERSION="${{ inputs.version }}"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      # 1) Пишем СВОЙ settings.xml с plain-токенами
      - name: Write project-local Maven settings
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}   # plain, из Sonatype User Token
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}   # plain
        run: |
          mkdir -p .mvn
          cat > .mvn/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
          <server>
          <id>ossrh</id>
          <username>${OSSRH_USERNAME}</username>
          <password>${OSSRH_PASSWORD}</password>
          </server>
          </servers>
          </settings>
          EOF
          # Чтобы не повторять -s во всех командах
          echo "-s .mvn/settings.xml" >> .mvn/maven.config

      # 2) На всякий: никаких master-password файлов
      - name: Ensure no Maven master-password file
        run: rm -f ~/.m2/settings-security.xml

      # 3) Диагностика (без утечки секретов)
      - name: Assert password is not Maven-encrypted
        run: |
          if grep -Ezo '<password>\s*\{.+\}\s*</password>' .mvn/settings.xml; then
            echo "::error::Found Maven-encrypted {…} in .mvn/settings.xml. Need PLAIN Sonatype token."
            exit 1
          fi
          # Печатаем замаскированный server-блок
          awk '/<server>/,/<\/server>/' .mvn/settings.xml \
            | sed -n '/<id>ossrh<\/id>/,/<\/server>/p' \
            | sed -E 's#(<username>).*?(</username>)#\1***REDACTED***\2#; s#(<password>).*?(</password>)#\1***REDACTED***\2#'

      # 4) Ставим JDK и импортируем GPG-ключ (БЕЗ серверных кредов)
      - name: Set up JDK 17 + import GPG
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # 5) Сборка + деплой. Passphrase через env, staging сделает nexus-staging-plugin
      - name: Build, test, sign & deploy to OSSRH (staging)
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn -B -Prelease clean verify
          mvn -B -Prelease deploy -DskipTests=false

      - name: Upload JaCoCo HTML report
        if: always() && success()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html
          path: target/site/jacoco

      - name: Create GitHub Release (push tag)
        if: ${{ github.event_name == 'push' }}
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (manual)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
