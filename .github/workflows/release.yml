name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3). If set, a tag v<version> is created and released.'
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (опционально) создание тега при ручном запуске
      - name: Create tag (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        run: |
          VERSION="${{ inputs.version }}"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      # 1) Пишем СВОЙ settings.xml с plain-токенами
      - name: Write project-local Maven settings
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: |
          set -euxo pipefail
          mkdir -p .mvn
          # ВАЖНО: без отступов перед <settings> и перед EOF
          cat > .mvn/settings.xml <<EOF
         <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
         <servers>
         <server>
         <id>ossrh</id>
         <username>${OSSRH_USERNAME}</username>
         <password>${OSSRH_PASSWORD}</password>
         </server>
         </servers>
         </settings>
         EOF
         # Проверим, что файл реально есть и читается
         test -f .mvn/settings.xml
         ls -la .mvn
         # Бонус: покажем замаскированный блок
         awk '/<server>/,/<\/server>/' .mvn/settings.xml \
         | sed -n '/<id>ossrh<\/id>/,/<\/server>/p' \
         | sed -E 's#(<username>).*?(</username>)#\1***REDACTED***\2#; s#(<password>).*?(</password>)#\1***REDACTED***\2#'

      - name: Ensure no Maven master-password file
        run: rm -f ~/.m2/settings-security.xml

      - name: GPG sanity
        run: gpg --list-secret-keys --keyid-format LONG

      - name: Build, test, sign & deploy to OSSRH (staging)
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euxo pipefail
          mvn -B -s .mvn/settings.xml -Prelease clean verify
          mvn -B -s .mvn/settings.xml -Prelease deploy -DskipTests=false


      # 5) Сборка + деплой. Passphrase через env, staging сделает nexus-staging-plugin
      - name: Build, test, sign & deploy to OSSRH (staging)
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn -B -Prelease clean verify
          mvn -B -Prelease deploy -DskipTests=false

      - name: Upload JaCoCo HTML report
        if: always() && success()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html
          path: target/site/jacoco

      - name: Create GitHub Release (push tag)
        if: ${{ github.event_name == 'push' }}
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (manual)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
